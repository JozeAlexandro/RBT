#ifndef _BT_TYPES_H
#define _BT_TYPES_H

/** ****************************************************************************
 * @file BT_types.h
 * @brief Описание типов данных бинарного дерева поиска и интерфейса доступа к
 * нему.
 * @author Петров А.С.
 * ****************************************************************************/


/* --- Подключение заголовочных файлов -------------------------------------- */

// Стандартная библиотека Си
#include <stdbool.h> // Булевы переменные
#include <stdint.h> // Целочисленные определения
#include <stddef.h> // size_t


/* --- Псевдонимы ----------------------------------------------------------- */

/** ****************************************************************************
 * @typedef btData_t
 * @brief Тип данных, хранящийся в узлах дерева.
 * ****************************************************************************/
typedef int btData_t;

/** ****************************************************************************
 * @typedef btfNode
 * @brief Сигнатура функции для обращения к данным узлов дерева.
 * ****************************************************************************/
typedef void( *btfNode )( const btData_t * const restrict );


/* --- Перечисления --------------------------------------------------------- */


/** ****************************************************************************
 * @enum bteStatus_t
 * @brief Статусные возврашаемые значения.
 * ****************************************************************************/
typedef enum
{
    BT_STATUS_SUCCESS, ///< Успех.
    BT_STATUS_FAIL ///< Ошибка.
} bteStatus_t;

/** ****************************************************************************
 * @enum bteOrderType
 * @brief Порядок обхода узлов дерева.
 * ****************************************************************************/
typedef enum
{
    BT_ORDER_PREFIX, ///< Префиксный.
    BT_ORDER_POSTFIX, ///< Постфиксный.
    BT_ORDER_INFIX ///< Инфиксный.
} bteOrderType;

/** ****************************************************************************
 * @enum bteTreeType
 * @brief Тип бинарного дерева.
 * ****************************************************************************/
typedef enum
{
    BT_TYPE_DEFAULT, ///< Обычное бинарное дерево поиска.
    BT_TYPE_RED_BLACK  ///< Черно-красное дерево.
} bteTreeType;


/* --- Инфтерфейс ----------------------------------------------------------- */


/** ****************************************************************************
 * @struct btsIBinaryTree
 * @brief Интерфейс для бинарного дерева.
 * ****************************************************************************/
typedef struct
{
    /** ************************************************************************
     * @brief Добавление элемента в дерево.
     * @param [in] data Данные для добавления.
     * @return Статус выполнения операции.
     * ************************************************************************/
    bteStatus_t ( * add )( btData_t data );

    /** ************************************************************************
     * @brief Удаление элемента из дерева по значению.
     * @param [in] data Значение элемента для удаления.
     * @return Статус выполнения операции.
     * ************************************************************************/
    bteStatus_t ( *remove )( btData_t data );

    /** ************************************************************************
     * @brief Поиск элемента.
     * @param [in] data Значение искомого элемента.
     * @return true - элемент есть в дереве, иначе false.
     * ************************************************************************/
    bool ( *contain )( btData_t data );

    /** ************************************************************************
     * @brief Количество узлов в дереве.
     * @return Количество узлов в дереве.
     * ************************************************************************/
    size_t ( *count )( void );

    /** ************************************************************************
     * @brief Удалить все узлы дерева.
     * @return Статус выполнения операции.
     * ************************************************************************/
    bteStatus_t ( *clear )( void );

    /** ************************************************************************
     * @brief Применить функцию к каждому узлу дерева.
     * @param [in] foo Функция, применяемая к узлам.
     * @return Статус выполнения операции.
     * ************************************************************************/
    bteStatus_t ( *useAll )( btfNode foo );

    /** ************************************************************************
     * @brief Установить порядок обхода дерева.
     * @param [in] order Порядок обхода.
     * ************************************************************************/
    void ( *setOrderType )( bteOrderType order );
} btsIBinaryTree;




#endif // _BT_TYPES_H
